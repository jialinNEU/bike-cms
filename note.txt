## 插件集

1. react-router-dom
2. axios
3. antd
4. less-loader
5. babel-plugin-import 
6. moment.js

#### less-loader配置

```
    {
      loader: require.resolve('less-loader'),
      options: {
        modules: false,
        modifyVars: {
          // 修改antd的primary类名的样式，下方babel-plugin-import的style需配置为true
          "primary-color": "#f9c700"  
        }
      }
    }
```

#### babel-plugin-import配置

https://www.npmjs.com/package/babel-plugin-import

- 在package.json的"babel"下，添加配置(注意babel的版本)

```
  "babel": {
    "presets": [
      "react-app"
    ],
    "plugins": [
      "import",
      {
        "libraryName": "antd",
        "libraryDirectory": "lib",
        "style": "css"  // css为加载已经编译好的，若使用true(动态编译)，需要降低less版本到2.7.3 ~ 3之间
      }
    ]
  }
```

## 主页面

1. 左侧导航栏
2. 右侧上中下结构，Header/Content/Footer

#### CSS学习

1. calc

2. 1vh = 1%, 100vh = 100%

#### 左侧导航栏制作

1. 通过静态文件导入数据格式如下

```
[
  {
    title: '表单',
    key: '/form',
    children: [
      {
        title: '登录',
        key: '/form/login',
      },
      {
        title: '注册',
        key: '/form/reg',
      }
    ]
  },
]
```

2. 左侧导航菜单渲染

- 使用antd的Menu组件
- 采用递归渲染的方法
- 使导航菜单填满整个区域：calc(100vh) + 设置背景色

#### 右侧结构

1. 上部Header部分

- 调用百度API进行天气获取
- 将公共机制放在src/util/utils.js中
- 对于时间来说，也可以说用moment第三方类库来进行时间封装
- 安装jsonp依赖，对jsonp再进行一层封装，包装诸如错误处理的事情

2. 底部Footer部分

- 采用@import进行颜色引入

3. 中间Content

- CSS实现箭头图标
- 伪类 + 绝对定位

## 路由

### react-router-dom 4.0

1. react-router: 提供了一些router的核心API，包含Router，Route，Switch等
2. react-router-dom：提供了BrowserRouter，HashRouter，Route，Link，NavLink等
3. npm install --save react-router-dom 进行安装

### 核心用法

##### HashRouter和BrowserRouter

1. HashRouter（http://localhost:3000/#/admin/buttons）

- Hash地址：指 # 号后面的url（即window.location.hash)，即/admin/buttons
- HashRouter使用Hash地址来保持页面UI于URL同步，window对象可以监听hashchange事件
- HashRouter不会将当前路由发送给服务器
- HashRouter通过将自己（容器内）的pathname和Route组件的path对比，从而改变渲染

```
// 主要参数

{
  history: {
    push()
  },
  location: {
    pathname: '/home'
  },
  match: {
    params: {},
    path: '/home',  // 声明在Route上的路径规则
    url: '/home'    // 满足path规则的某个具体的url
  }
}
```

```
<HashRouter
  basename={ "base URL for all locations" }
  getUserConfirmation={ optionBool }
  hashType={ "slash/noslash" }
>
</HashRouter>
```

2. BrowserRouter（http://localhost:3000/admin/buttons）

- 使用HTML5 history的API处理url，url指向真实url的资源路径。
- 当通过真实url访问网站的时候，由于路径是指向服务器的真实路径，所以用户访问的资源有可能不存在

```
<BrowserRouter
  basename={"base URL for all locations"}
  forceRefresh={ optionBool }
  getUserConfirmation={ optionalFunc }
  keyLength={ optionNumber, length of location.key }
>
</BrowserRouter>
```

3. Router

- 它是BrowserRouter和HashRouter的base组件
- 可以传入`history/createBrowserHistory`创建的值，作为history props的值

```
import createHistory from 'history/createBrowserHistory';

const history = createHistory();

ReactDOM.render(
  <Router history={history}>
    // ...
  </Router>,
  document.getElementById('root')
);
```

4. withRouter

- 它是一个HOC，当被包裹组件渲染时，它会传入最新的match，location和history props给被包裹的组件


5. history对象

```
{
  // 属性
  length: "number of entries in the history stack",
  action: "current action(PUSH, REPLACE, or POP)",
  location: {
    pathname: "the path of the URL",
    search: "the URL query string",
    hash: "the URL hash fragment",
    state: "object --> location-specific state"
  },
  // 方法
  push(path, [state]),
  replace(path, [state]),
  go(n),
  goBack(),
  goForward(),
}
```

<br>

##### Route：path, exact, component, render

1. <Route>上的props

- path
- exact
- strict
- location

2. 三种在<Route>中渲染的方法

i. <Route component={} />
- router会使用React.createElement从给的组件上创建一个新的React节点
- 这意味着如果你给组件的props传入一个内联函数值，那么每次渲染都会传入一个新组件


ii. <Route render={()=>(<div>Home Component</div>)} />
- 这个会解决component渲染方法造成的重复渲染的问题

iii. <Route children />
- 当无论path是否匹配location仍需要渲染的时候，可以使用children进行渲染，其使用方法与render相同

* 无论哪种渲染方法，都会通过props传入match, location和history

3. 对于嵌套路由而言，若父级配置了exact为true，那么它的子路由无法被匹配

```
          <Route exact path="/main" render={()=>
            <Main>
              {/* 子路由无法匹配 */}
              <Route path="/main/a" component={About}></Route>
            </Main>
          }></Route>
```

##### NavLink和Link

1. Link

- 通过`<Route path="/user/:id` />`定义路由
- 通过`this.props.match.params.id`进行取值
- 可用的props:
  - to (可以是string，也可以是object)
  - replace (true的时候，点击Link会替换history stack的记录，而不是添加一条记录)
  - innerRef

2. NavLink

- 特殊的<Link>，可以添加style attribute到渲染的组件上
- 可用的props:
  - activeClassName
  - activeStyle
  - isActive (一个用于添加额外逻辑决定是否link是active的函数)

##### Switch

- 之渲染匹配的第一个<Route>中的组件

##### Redirect

- 路由重定向，会覆盖当前location：<Redirect to="/admin/home" />

## 地图功能

##### 创建ak（类似token），加载百度地图sdk
- 在/public下的index.html中使用<srcipt>标签加载百度sdk
##### 地图初始化
##### 添加地图控件
##### 绘制用户行驶路线
##### 绘制服务区地图


## 工程结构

### app.js    - 项目入口，可以容纳任何组件
### admin.js  - 主页面结构，加载主页面所有菜单
### common.js - 通用页面结构


## 项目工程化

### 解决什么问题

- 提高开发效率
- 降低维护难度

### 如何解决问题

- 项目架构设计
- 目录结构定义
- 制定项目开发规范 (ESLint规范)
- 模块化（更细小的颗粒度）、组件化（更粗的颗粒度）
```
组件：表格
模块：分页机制
```
- 前后端接口规范
- 性能优化、自动化部署（压缩、合并、打包）



## 权限设计

#### 用户与角色的概念

1. 用户：系统的登录用户，可以理解为一系列人员
2. 角色：系统中担任的角色，是系统赋予用户的头衔

#### 传统设计

- 为用户分配菜单选项，如用户X能看到A, B, C菜单，而用户Y只能看到A菜单

#### RBAC权限模型

- 基于角色的访问控制（Role-Based Access Control），通过角色和权限建立管理，再赋予用户不同的角色
- 用户 ===> 角色 ===> 权限



## Redux集成

#### 基本介绍

1. Reducer：pure function，用于对State的业务处理
2. Action：plain object，用于描述事件行为，改变state

Store subscribe Component
==> Component triggers Action 
==> Action dispatch Reducer
==> Reducer change Store (state)

#### Redux集成

1. 创建Action模块
2. 创建Reducer模块
3. 创建Store模块
4. 通过connect方法将React组件和Redux连接起来
5. 通过Provider作为项目的root组件，用于数据的存储，传入store

